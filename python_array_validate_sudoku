# Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:
# Each row must contain the digits 1-9 without repetition.
# Each column must contain the digits 1-9 without repetition.
# Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.
# Note:
# A Sudoku board (partially filled) could be valid but is not necessarily solvable.
# Only the filled cells need to be validated according to the mentioned rules.
# Example 1:
# Input: board = 
# [["5","3",".",".","7",".",".",".","."]
# ,["6",".",".","1","9","5",".",".","."]
# ,[".","9","8",".",".",".",".","6","."]
# ,["8",".",".",".","6",".",".",".","3"]
# ,["4",".",".","8",".","3",".",".","1"]
# ,["7",".",".",".","2",".",".",".","6"]
# ,[".","6",".",".",".",".","2","8","."]
# ,[".",".",".","4","1","9",".",".","5"]
# ,[".",".",".",".","8",".",".","7","9"]]
# Output: true

# Input: board = 
# [["8","3",".",".","7",".",".",".","."]
# ,["6",".",".","1","9","5",".",".","."]
# ,[".","9","8",".",".",".",".","6","."]
# ,["8",".",".",".","6",".",".",".","3"]
# ,["4",".",".","8",".","3",".",".","1"]
# ,["7",".",".",".","2",".",".",".","6"]
# ,[".","6",".",".",".",".","2","8","."]
# ,[".",".",".","4","1","9",".",".","5"]
# ,[".",".",".",".","8",".",".","7","9"]]
# Output: false
# Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.

class Solution:
    def isValidSudoku(board):# List[List[str]] -> bool
        #board[row][col]
        iter_value =range(0,len(board),3)
        for i in range(len(board)): # go through each row
            #check rows
            k=0
            for s in board[i]:
                if s != '.':
                    k += 1 # count numbers per row
            set_row=set(board[i]) # set the row + '.'.
            if (len(set_row)-1)<k: # minus 1 for set_row to get rid off '.'
                 return bool(0) # false
            #check coloumns
            dict_board_col={}
            for kk in range(len(board)):
                if board[kk][i] != '.':
                    if board[kk][i] in dict_board_col:
                        return bool(0) # false
                    else:
                        dict_board_col[board[kk][i]] =1
            # 3x3's
            if i < len(iter_value): # allow 3 times to go through this condition hence it'll checked all possible 3x3's
                dict_board_3x3={}
                counter=0
                for row_kk in range(len(board)):
                    counter += 1
                    if board[row_kk][iter_value[i]] != '.':
                        if board[row_kk][iter_value[i]] in dict_board_3x3:
                            return bool(0) # false
                        else:
                            dict_board_3x3[board[row_kk][iter_value[i]]] =1
                    if board[row_kk][iter_value[i]+1] != '.':
                        if board[row_kk][iter_value[i]+1] in dict_board_3x3:
                            return bool(0) # false
                        else:
                            dict_board_3x3[board[row_kk][iter_value[i]+1]] =1
                    if board[row_kk][iter_value[i]+2] != '.':
                        if board[row_kk][iter_value[i]+2] in dict_board_3x3:
                            return bool(0) # false
                        else:
                            dict_board_3x3[board[row_kk][iter_value[i]+2]] =1 
                    if counter == 3:
                        dict_board_3x3={}
                        counter=0           
        return bool(1) # true
