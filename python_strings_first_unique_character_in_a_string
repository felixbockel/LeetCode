#Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.
#Example 1:
# Input: s = "leetcode"
# Output: 0
# Example 2:
# Input: s = "loveleetcode"
# Output: 2
# Example 3:
# Input: s = "aabb"
# Output: -1

class Solution:
    def firstUniqChar(s) -> int:
        dict_notunique={} # create empty dict
        dict_index={}
        for i in range(len(s)):
            if s[i] not in dict_notunique:
                dict_notunique[s[i]]=1
                dict_index[s[i]]=i
            else:
                dict_notunique[s[i]]+=1
        return dict_index[list(dict_notunique.keys())[list(dict_notunique.values()).index(1)]] if 1 in dict_notunique.values() else -1 # its the index of dictonary which is here convenient since it is what im looking for anyways.it is int()
