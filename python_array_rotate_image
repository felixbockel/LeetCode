# You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).
# You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.
# Example 1:
# Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
# Output: [[7,4,1],[8,5,2],[9,6,3]]
# Example 2:
# Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]
# Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]

class Solution:
    def rotate(matrix):
        """
        Do not return anything, modify matrix in-place instead.
        """
        # outer to inner layer and each rotate in-place 90deg
        # 'for i in range' defines numbers of layers of the system
            # then each layer does a rotation
        if len(matrix)!=1:
            length_row=len(matrix[0])
            number_layers=(length_row-int(length_row/2))
            next_layer=0
            if number_layers >= 1: # 1 row has 1 layer -> here no rotation. 2 rows has 1 layer (outer) -> rotate, 3 has 2 layers (outer,inner), 4 has 2, 5 has 3, 6 has 3, 7 has 4 and so on.. i is number of layers
                for i in range(length_row): # numbers of layers
                    if next_layer == 0 or (len(matrix[i][next_layer:-next_layer]))>1: # second condition is when row length of nth layer is bigger than 1
                        row1=[]
                        row2=[]
                        col1=[]
                        col2=[]
                        #need to grab full row and col of each layer
                        row1[:]=matrix[i] # upper left to upper right
                        row2[:]=matrix[-(i+1)] # lower right to lower left
                        for k in range(len(matrix)-1,-1,-1): #get columns
                            col1+=[matrix[k][-(i+1)]] # upper right to lower right
                            col2+=[matrix[k][i]] # lower left to upper left
                        # cut array shorter when going through different layers and perform swap elements -> rotation  
                        if next_layer > 0:
                            matrix[i][next_layer:-next_layer]=col2[next_layer:-(next_layer)]
                            matrix[-(i+1)][next_layer:-next_layer]=col1[next_layer:-(next_layer)]
                            if (len(matrix[i][next_layer:-next_layer]))>2: # go in if condition when row length of nth layer is bigger than 2
                                # cut k if next_layer increases by creating a set in order to compare values
                                exclude_k_next_layer_front=set([*range((next_layer-1),-(next_layer+1),-1)]) # setup range and set to compare values
                                exclude_k_next_layer_back=[*range(-len(matrix),0,1)]# use index of len(matrix) to make sure tail bit of it wont be used in for loop.
                                for k in range(len(matrix)): #get columns
                                    if k not in exclude_k_next_layer_front and exclude_k_next_layer_back[k] not in exclude_k_next_layer_front:
                                        matrix[k][-(i+1)]=row1[k]
                                        matrix[k][i]=row2[k]
                        else:
                            matrix[i]=col2
                            matrix[-(i+1)]=col1
                            for k in range(len(matrix)): #get columns
                                matrix[k][-(i+1)]=row1[k]
                                matrix[k][i]=row2[k]
                    else:
                        return matrix    
                    number_layers -=1
                    next_layer +=1
            return matrix
        else:
            return matrix
