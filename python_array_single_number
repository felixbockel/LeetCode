# Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.
#You must implement a solution with a linear runtime complexity and use only constant extra space.
#Example 1:
#Input: nums = [2,2,1]
#Output: 1
#Example 2:
#Input: nums = [4,1,2,1,2]
#Output: 4
#Example 3:
#Input: nums = [1]
#Output: 1

class Solution(object):
    def singleNumber(nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        dict_unique={} # create empty dict
        for i in range(len(nums)):
            counter=0
            if (nums[i]) in dict_unique:
                dict_unique[nums[i]] += 1 
            else:
                dict_unique[nums[i]]= 1
        if 1 in dict_unique.values():
            return list(dict_unique.keys())[list(dict_unique.values()).index(1)]
