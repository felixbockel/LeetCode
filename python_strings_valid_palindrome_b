# A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.
# Given a string s, return true if it is a palindrome, or false otherwise.
# Example 1:
# Input: s = "A man, a plan, a canal: Panama"
# Output: true
# Explanation: "amanaplanacanalpanama" is a palindrome.
# Example 2:
# Input: s = "race a car"
# Output: false
# Explanation: "raceacar" is not a palindrome.
# Example 3:
# Input: s = " "
# Output: true
# Explanation: s is an empty string "" after removing non-alphanumeric characters.
# Since an empty string reads the same forward and backward, it is a palindrome.
 
class Solution:
    def isPalindrome(s): # -> bool:
        upper_case="ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        lower_case="abcdefghijklmnopqrstuvwxyz"
        digits="0123456789"
        k=0
        for i in range(len(s)):
            # convert all upper cases to a lower case
            if s[i-k] in upper_case:
                idx=upper_case.find(s[i-k])
                s=s[:(i-k)] + lower_case[idx] + s[((i-k)+1):]
            # remove all non-aplhanumeric characters
            if s[i-k] not in lower_case and s[i-k] not in digits:
                s = s[:(i-k)] + s[((i-k)+1):]
                k+=1
        return s == s[::-1],s,s[::-1]
