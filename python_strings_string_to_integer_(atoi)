# Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++'s atoi function).
# The algorithm for myAtoi(string s) is as follows:
# Read in and ignore any leading whitespace.
# Check if the next character (if not already at the end of the string) is '-' or '+'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.
# Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.
# Convert these digits into an integer (i.e. "123" -> 123, "0032" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).
# If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.
# Return the integer as the final result.
# Note:
# Only the space character ' ' is considered a whitespace character.
# Do not ignore any characters other than the leading whitespace or the rest of the string after the digits.
# Example 1:
# Input: s = "42"
# Output: 42
# Explanation: The underlined characters are what is read in, the caret is the current reader position.
# Step 1: "42" (no characters read because there is no leading whitespace)
#          ^
# Step 2: "42" (no characters read because there is neither a '-' nor '+')
#          ^
# Step 3: "42" ("42" is read in)
#            ^
# The parsed integer is 42.
# Since 42 is in the range [-231, 231 - 1], the final result is 42.
# Example 2:
# Input: s = "   -42"
# Output: -42
# Explanation:
# Step 1: "   -42" (leading whitespace is read and ignored)
#             ^
# Step 2: "   -42" ('-' is read, so the result should be negative)
#              ^
# Step 3: "   -42" ("42" is read in)
#                ^
# The parsed integer is -42.
# Since -42 is in the range [-231, 231 - 1], the final result is -42.
# Example 3:
# Input: s = "4193 with words"
# Output: 4193
# Explanation:
# Step 1: "4193 with words" (no characters read because there is no leading whitespace)
#          ^
# Step 2: "4193 with words" (no characters read because there is neither a '-' nor '+')
#          ^
# Step 3: "4193 with words" ("4193" is read in; reading stops because the next character is a non-digit)
#              ^
# The parsed integer is 4193.
# Since 4193 is in the range [-231, 231 - 1], the final result is 4193.

#method
class Solution:
    def myAtoi(s):
        counter=0
        int_captured=0
        idx_int=0
        save_value_int=0
        value_sign=0
        count_sign=0
        for i in range(len(s)):
            dig_y_n=str.isdigit((s[i]))
            if dig_y_n == True:
                idx_int=1
            else:
                idx_int=0
            if (s[i].isalpha()) and (int_captured == 0): # if letters come before numbers
                break
            if (int_captured == 1) and (idx_int==0):
                break
            if (s[i] == '+') or (s[i] == '-'):
                count_sign += 1
                if count_sign > 1:
                    break
            if s[i] == ' ':
                if count_sign > 0:
                    break
            if idx_int == 1:
                if counter == 0:
                    if i > 0:
                        dig_y_n=str.isdigit((s[i-1]))
                        if dig_y_n == False:
                            value_sign=s[i-1]
                            if value_sign == '+':
                                value_sign="positive"
                            elif value_sign == '-':
                                value_sign="negative"
                            elif i == 0:
                                value_sign="positive"
                            else:
                                if (value_sign != ' '):
                                    save_value_int=0
                                    break  
                        else:
                            value_sign="positive"
                    else:
                        value_sign="positive"
                    int_captured=1
                    save_value_int=s[i]
                    counter +=1
                else:
                    save_value_int=int(f"{save_value_int}{s[i]}")
        if type(save_value_int) == str:
            save_value_int=int(save_value_int)
        if value_sign == "negative":
            save_value_int=-abs(save_value_int)   
        if abs(save_value_int) >= 2**31 and save_value_int != 2**31 - 1:
            if value_sign == "negative": #clamp number if number is >32bit
                save_value_int=-abs(2**31)
            else:
                save_value_int=(2**31-1)
        return save_value_int
